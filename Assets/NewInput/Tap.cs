//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/NewInput/Tap.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Tap: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Tap()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Tap"",
    ""maps"": [
        {
            ""name"": ""TapController"",
            ""id"": ""f9f12b72-ac73-4964-8f94-0de38a2a9c00"",
            ""actions"": [
                {
                    ""name"": ""TouchA"",
                    ""type"": ""PassThrough"",
                    ""id"": ""90374b86-6009-4c0f-b811-039016feb502"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Presset"",
                    ""type"": ""Button"",
                    ""id"": ""3e263117-2e2a-44c7-a18e-b4081c4385e4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=2)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Position"",
                    ""type"": ""PassThrough"",
                    ""id"": ""878f4cc8-1b36-4c94-a2d3-0b91ad7cdcbb"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b5b2472b-7425-4261-bd20-8b782edff03b"",
                    ""path"": ""<Touchscreen>/primaryTouch/tap"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TouchA"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d84a6948-a09c-4936-b5c4-a1d24b6aa21a"",
                    ""path"": ""<Touchscreen>/primaryTouch/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Presset"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""81e1fcab-ef9e-4055-8433-ba290d14f90e"",
                    ""path"": ""<Touchscreen>/primaryTouch/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // TapController
        m_TapController = asset.FindActionMap("TapController", throwIfNotFound: true);
        m_TapController_TouchA = m_TapController.FindAction("TouchA", throwIfNotFound: true);
        m_TapController_Presset = m_TapController.FindAction("Presset", throwIfNotFound: true);
        m_TapController_Position = m_TapController.FindAction("Position", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // TapController
    private readonly InputActionMap m_TapController;
    private List<ITapControllerActions> m_TapControllerActionsCallbackInterfaces = new List<ITapControllerActions>();
    private readonly InputAction m_TapController_TouchA;
    private readonly InputAction m_TapController_Presset;
    private readonly InputAction m_TapController_Position;
    public struct TapControllerActions
    {
        private @Tap m_Wrapper;
        public TapControllerActions(@Tap wrapper) { m_Wrapper = wrapper; }
        public InputAction @TouchA => m_Wrapper.m_TapController_TouchA;
        public InputAction @Presset => m_Wrapper.m_TapController_Presset;
        public InputAction @Position => m_Wrapper.m_TapController_Position;
        public InputActionMap Get() { return m_Wrapper.m_TapController; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TapControllerActions set) { return set.Get(); }
        public void AddCallbacks(ITapControllerActions instance)
        {
            if (instance == null || m_Wrapper.m_TapControllerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_TapControllerActionsCallbackInterfaces.Add(instance);
            @TouchA.started += instance.OnTouchA;
            @TouchA.performed += instance.OnTouchA;
            @TouchA.canceled += instance.OnTouchA;
            @Presset.started += instance.OnPresset;
            @Presset.performed += instance.OnPresset;
            @Presset.canceled += instance.OnPresset;
            @Position.started += instance.OnPosition;
            @Position.performed += instance.OnPosition;
            @Position.canceled += instance.OnPosition;
        }

        private void UnregisterCallbacks(ITapControllerActions instance)
        {
            @TouchA.started -= instance.OnTouchA;
            @TouchA.performed -= instance.OnTouchA;
            @TouchA.canceled -= instance.OnTouchA;
            @Presset.started -= instance.OnPresset;
            @Presset.performed -= instance.OnPresset;
            @Presset.canceled -= instance.OnPresset;
            @Position.started -= instance.OnPosition;
            @Position.performed -= instance.OnPosition;
            @Position.canceled -= instance.OnPosition;
        }

        public void RemoveCallbacks(ITapControllerActions instance)
        {
            if (m_Wrapper.m_TapControllerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ITapControllerActions instance)
        {
            foreach (var item in m_Wrapper.m_TapControllerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_TapControllerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public TapControllerActions @TapController => new TapControllerActions(this);
    public interface ITapControllerActions
    {
        void OnTouchA(InputAction.CallbackContext context);
        void OnPresset(InputAction.CallbackContext context);
        void OnPosition(InputAction.CallbackContext context);
    }
}
